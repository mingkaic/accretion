// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenncorProfileServiceClient is the client API for TenncorProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenncorProfileServiceClient interface {
	ListProfile(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
}

type tenncorProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenncorProfileServiceClient(cc grpc.ClientConnInterface) TenncorProfileServiceClient {
	return &tenncorProfileServiceClient{cc}
}

func (c *tenncorProfileServiceClient) ListProfile(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfileResponse, error) {
	out := new(ListProfileResponse)
	err := c.cc.Invoke(ctx, "/tenncor_profile.TenncorProfileService/ListProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenncorProfileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/tenncor_profile.TenncorProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenncorProfileServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/tenncor_profile.TenncorProfileService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenncorProfileServiceServer is the server API for TenncorProfileService service.
// All implementations must embed UnimplementedTenncorProfileServiceServer
// for forward compatibility
type TenncorProfileServiceServer interface {
	ListProfile(context.Context, *ListProfileRequest) (*ListProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	mustEmbedUnimplementedTenncorProfileServiceServer()
}

// UnimplementedTenncorProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenncorProfileServiceServer struct {
}

func (UnimplementedTenncorProfileServiceServer) ListProfile(context.Context, *ListProfileRequest) (*ListProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfile not implemented")
}
func (UnimplementedTenncorProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedTenncorProfileServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedTenncorProfileServiceServer) mustEmbedUnimplementedTenncorProfileServiceServer() {}

// UnsafeTenncorProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenncorProfileServiceServer will
// result in compilation errors.
type UnsafeTenncorProfileServiceServer interface {
	mustEmbedUnimplementedTenncorProfileServiceServer()
}

func RegisterTenncorProfileServiceServer(s grpc.ServiceRegistrar, srv TenncorProfileServiceServer) {
	s.RegisterService(&TenncorProfileService_ServiceDesc, srv)
}

func _TenncorProfileService_ListProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenncorProfileServiceServer).ListProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenncor_profile.TenncorProfileService/ListProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenncorProfileServiceServer).ListProfile(ctx, req.(*ListProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenncorProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenncorProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenncor_profile.TenncorProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenncorProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenncorProfileService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenncorProfileServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenncor_profile.TenncorProfileService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenncorProfileServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenncorProfileService_ServiceDesc is the grpc.ServiceDesc for TenncorProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenncorProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenncor_profile.TenncorProfileService",
	HandlerType: (*TenncorProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProfile",
			Handler:    _TenncorProfileService_ListProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _TenncorProfileService_GetProfile_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _TenncorProfileService_CreateProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/profile.proto",
}
